// screens/StockListScreen.js
import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  RefreshControl,
  TouchableOpacity,
  Alert,
  ActivityIndicator,
  TextInput,
} from 'react-native';
import axios from 'axios';

const StockListScreen = ({ navigation }) => {
  const [stocksData, setStocksData] = useState([]);
  const [loading, setLoading] = useState(true);
  const [refreshing, setRefreshing] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');

  const FLASK_API_BASE_URL = 'https://learntoinvestai.com';

  // Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  const fetchStocksData = async () => {
    try {
      console.log('üìà Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏöîÏ≤≠ Ï§ë...');
      console.log('üîó API URL:', `${FLASK_API_BASE_URL}/api/all_stocks_data`);

      const response = await axios.get(`${FLASK_API_BASE_URL}/api/all_stocks_data`, {
        timeout: 15000,
        headers: {
          'Content-Type': 'application/json',
          'Accept': 'application/json',
        }
      });

      console.log('‚úÖ Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏàòÏã†:', response.data);
      setStocksData(response.data.stocks || []);
    } catch (error) {
      console.error('‚ùå Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Î°úÎìú Ïã§Ìå®:', error);
      console.log('üîç ÏóêÎü¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥:');
      console.log('  - ÏóêÎü¨ ÏΩîÎìú:', error.code);
      console.log('  - ÏóêÎü¨ Î©îÏãúÏßÄ:', error.message);

      if (error.response) {
        console.log('  - ÏùëÎãµ ÏÉÅÌÉú:', error.response.status);
        console.log('  - ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', error.response.data);
        console.log('  - ÏùëÎãµ Ìó§Îçî:', error.response.headers);
      }

      let errorMessage = 'Ï£ºÏãù Îç∞Ïù¥ÌÑ∞Î•º Î∂àÎü¨Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§.';
      if (error.response?.status === 401) {
        errorMessage = 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.';
      } else if (error.response?.status === 500) {
        errorMessage = 'ÏÑúÎ≤Ñ ÎÇ¥Î∂Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
      } else if (error.response) {
        errorMessage = `ÏÑúÎ≤Ñ Ïò§Î•ò: ${error.response.status}`;
      } else if (error.request) {
        errorMessage = 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏ÌïòÏÑ∏Ïöî.';
      }

      Alert.alert('Ïò§Î•ò', errorMessage);

      // ÌÖåÏä§Ìä∏Ïö© ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ (Í∞úÎ∞ú Ï§ëÏóêÎßå ÏÇ¨Ïö©)
      console.log('üß™ ÌÖåÏä§Ìä∏Ïö© ÎçîÎØ∏ Îç∞Ïù¥ÌÑ∞ ÏÇ¨Ïö©');
      setStocksData([
        {
          ticker: 'AAPL',
          name: 'Apple Inc.',
          price: 150.00,
          ai_insight: 'AI ÏΩîÏπò: ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§. BUY Ï∂îÏ≤ú.'
        },
        {
          ticker: 'MSFT',
          name: 'Microsoft Corp.',
          price: 300.00,
          ai_insight: 'AI ÏΩîÏπò: ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§. HOLD Ï∂îÏ≤ú.'
        },
        {
          ticker: 'NVDA',
          name: 'NVIDIA Corporation',
          price: 420.00,
          ai_insight: 'AI ÏΩîÏπò: ÌÖåÏä§Ìä∏ Îç∞Ïù¥ÌÑ∞ÏûÖÎãàÎã§. Í∞ïÎ†•Ìïú BUY Ï∂îÏ≤ú.'
        }
      ]);
    } finally {
      setLoading(false);
      setRefreshing(false);
    }
  };

  // ÌôîÎ©¥ Î°úÎìú Ïãú Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞
  useEffect(() => {
    fetchStocksData();
  }, []);

  // ÏÉàÎ°úÍ≥†Ïπ®
  const onRefresh = () => {
    setRefreshing(true);
    fetchStocksData();
  };

  // Ï£ºÏãù Îß§Ïàò Ìï®Ïàò
  const buyStock = (ticker, price) => {
    Alert.prompt(
      'Ï£ºÏãù Îß§Ïàò',
      `${ticker} (ÌòÑÏû¨Í∞Ä: $${price.toFixed(2)})Î•º Î™á Ï£º Îß§ÏàòÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Îß§Ïàò',
          onPress: async (quantity) => {
            if (!quantity || isNaN(quantity) || quantity <= 0) {
              Alert.alert('Ïò§Î•ò', 'Ïò¨Î∞îÎ•∏ ÏàòÎüâÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
              return;
            }

            try {
              console.log(`üí∞ ${ticker} ${quantity}Ï£º Îß§Ïàò ÏãúÎèÑ...`);
              console.log(`üí∞ ÏòàÏÉÅ ÎπÑÏö©: ${(price * quantity).toFixed(2)}`);

              const response = await axios.post(`${FLASK_API_BASE_URL}/api/buy`, {
                ticker: ticker,
                quantity: parseInt(quantity)
              }, {
                timeout: 10000,
                headers: {
                  'Content-Type': 'application/json',
                  'Accept': 'application/json',
                }
              });

              console.log('üì• Îß§Ïàò ÏùëÎãµ:', response.data);

              if (response.data.success) {
                Alert.alert('Îß§Ïàò ÏÑ±Í≥µ', response.data.message);
                console.log('‚úÖ Îß§Ïàò ÏÑ±Í≥µ:', response.data);
                // Í±∞Îûò ÏÑ±Í≥µ ÌõÑ Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
                fetchStocksData();
              } else {
                Alert.alert('Îß§Ïàò Ïã§Ìå®', response.data.message);
                console.log('‚ùå Îß§Ïàò Ïã§Ìå®:', response.data);
              }
            } catch (error) {
              console.error('‚ùå Îß§Ïàò API Ïò§Î•ò:', error);
              console.log('üîç ÏóêÎü¨ ÏÉÅÏÑ∏ Ï†ïÎ≥¥:');
              console.log('  - ÏÉÅÌÉú ÏΩîÎìú:', error.response?.status);
              console.log('  - ÏùëÎãµ Îç∞Ïù¥ÌÑ∞:', error.response?.data);
              console.log('  - ÏóêÎü¨ Î©îÏãúÏßÄ:', error.message);

              let errorMessage = 'Îß§Ïàò ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
              if (error.response?.status === 400) {
                errorMessage = error.response?.data?.message || 'ÏûòÎ™ªÎêú ÏöîÏ≤≠ÏûÖÎãàÎã§. ÏàòÎüâÏù¥ÎÇò ÏûîÍ≥†Î•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.';
              } else if (error.response?.status === 401) {
                errorMessage = 'Î°úÍ∑∏Ïù∏Ïù¥ ÌïÑÏöîÌï©ÎãàÎã§.';
              } else if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
              }
              Alert.alert('Îß§Ïàò Ïò§Î•ò', errorMessage);
            }
          }
        }
      ],
      'plain-text',
      '1'
    );
  };

  // Ï£ºÏãù Îß§ÎèÑ Ìï®Ïàò
  const sellStock = (ticker, price) => {
    Alert.prompt(
      'Ï£ºÏãù Îß§ÎèÑ',
      `${ticker} (ÌòÑÏû¨Í∞Ä: $${price.toFixed(2)})Î•º Î™á Ï£º Îß§ÎèÑÌïòÏãúÍ≤†ÏäµÎãàÍπå?`,
      [
        { text: 'Ï∑®ÏÜå', style: 'cancel' },
        {
          text: 'Îß§ÎèÑ',
          onPress: async (quantity) => {
            if (!quantity || isNaN(quantity) || quantity <= 0) {
              Alert.alert('Ïò§Î•ò', 'Ïò¨Î∞îÎ•∏ ÏàòÎüâÏùÑ ÏûÖÎ†•Ìï¥Ï£ºÏÑ∏Ïöî.');
              return;
            }

            try {
              console.log(`üí∏ ${ticker} ${quantity}Ï£º Îß§ÎèÑ ÏãúÎèÑ...`);
              const response = await axios.post(`${FLASK_API_BASE_URL}/api/sell`, {
                ticker: ticker,
                quantity: parseInt(quantity)
              }, {
                timeout: 10000,
                headers: {
                  'Content-Type': 'application/json',
                  'Accept': 'application/json',
                }
              });

              if (response.data.success) {
                Alert.alert('Îß§ÎèÑ ÏÑ±Í≥µ', response.data.message);
                console.log('‚úÖ Îß§ÎèÑ ÏÑ±Í≥µ:', response.data);
                // Í±∞Îûò ÏÑ±Í≥µ ÌõÑ Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ ÏÉàÎ°úÍ≥†Ïπ®
                fetchStocksData();
              } else {
                Alert.alert('Îß§ÎèÑ Ïã§Ìå®', response.data.message);
                console.log('‚ùå Îß§ÎèÑ Ïã§Ìå®:', response.data);
              }
            } catch (error) {
              console.error('‚ùå Îß§ÎèÑ API Ïò§Î•ò:', error);
              let errorMessage = 'Îß§ÎèÑ ÏöîÏ≤≠ Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
              if (error.response?.data?.message) {
                errorMessage = error.response.data.message;
              }
              Alert.alert('Îß§ÎèÑ Ïò§Î•ò', errorMessage);
            }
          }
        }
      ],
      'plain-text',
      '1'
    );
  };

  // Í≤ÄÏÉâ ÌïÑÌÑ∞ÎßÅ
  // Í≤ÄÏÉâ ÌïÑÌÑ∞ÎßÅ (ÏïàÏ†ÑÌïú Î≤ÑÏ†Ñ)
  const filteredStocks = stocksData.filter(stock => {
    const query = (searchQuery || '').toLowerCase();
    const ticker = (stock.ticker || '').toLowerCase();
    const name = (stock.name || '').toLowerCase();

    return ticker.includes(query) || name.includes(query);
  });
  // Î°úÎî© ÌôîÎ©¥
  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <ActivityIndicator size="large" color="#007bff" />
        <Text style={styles.loadingText}>Ï£ºÏãù Îç∞Ïù¥ÌÑ∞ Î°úÎî© Ï§ë...</Text>
      </View>
    );
  }

  // Ï£ºÏãù Ìï≠Î™© Î†åÎçîÎßÅ
  const renderStockItem = (stock) => {
    const { ticker, name, current_price, ai_insight } = stock;
    const price = current_price || 0;

    // AI Ïù∏ÏÇ¨Ïù¥Ìä∏ÏóêÏÑú Ï∂îÏ≤ú Îì±Í∏â Ï∂îÏ∂ú (Í∞ÑÎã®Ìïú ÌååÏã±)
    const getBuyRating = (insight) => {
      if ((insight || '').includes('BUY')) return { rating: 'BUY', color: '#28a745' };
      if ((insight || '').includes('SELL')) return { rating: 'SELL', color: '#dc3545' };
      if ((insight || '').includes('HOLD')) return { rating: 'HOLD', color: '#ffc107' };
      return { rating: 'N/A', color: '#6c757d' };
    };

    const ratingInfo = getBuyRating(ai_insight);

    return (
      <View key={ticker} style={styles.stockItem}>
        <View style={styles.stockHeader}>
          <View style={styles.stockInfo}>
            <Text style={styles.tickerText}>{ticker}</Text>
            <Text style={styles.nameText} numberOfLines={1}>{name}</Text>
            <View style={styles.ratingContainer}>
              <Text style={[styles.ratingText, { color: ratingInfo.color }]}>
                {ratingInfo.rating}
              </Text>
            </View>
          </View>
          <View style={styles.priceContainer}>
            <Text style={styles.priceText}>${price.toFixed(2)}</Text>
            <View style={styles.buttonContainer}>
              <TouchableOpacity
                style={[styles.actionButton, styles.buyButton]}
                onPress={() => buyStock(ticker, price)}
              >
                <Text style={styles.actionButtonText}>Îß§Ïàò</Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[styles.actionButton, styles.sellButton]}
                onPress={() => sellStock(ticker, price)}
              >
                <Text style={styles.actionButtonText}>Îß§ÎèÑ</Text>
              </TouchableOpacity>
            </View>
          </View>
        </View>

        {/* AI Ïù∏ÏÇ¨Ïù¥Ìä∏ (Í∞ÑÎûµ ÌëúÏãú) */}
        <TouchableOpacity
          style={styles.insightContainer}
          onPress={() => {
            Alert.alert(
              `${ticker} AI Î∂ÑÏÑù`,
              ai_insight,
              [{ text: 'ÌôïÏù∏' }],
              { scrollEnabled: true }
            );
          }}
        >
          <Text style={styles.insightText} numberOfLines={2}>
            {(ai_insight || '').length > 100 ? `${(ai_insight || '').substring(0, 100)}...` : (ai_insight || 'AI Î∂ÑÏÑù Ï†ïÎ≥¥Í∞Ä ÏóÜÏäµÎãàÎã§.')}
          </Text>
          <Text style={styles.viewMoreText}>ÏûêÏÑ∏Ìûà Î≥¥Í∏∞ ‚Üí</Text>
        </TouchableOpacity>
      </View>
    );
  };

  return (
    <View style={styles.container}>
      {/* Ìó§Îçî */}
      <View style={styles.header}>
        <TouchableOpacity
          style={styles.backButton}
          onPress={() => navigation.navigate('MainDashboard')}
        >
          <Text style={styles.backButtonText}>‚Üê Ìôà</Text>
        </TouchableOpacity>
        <Text style={styles.headerTitle}>Ï£ºÏãù Í±∞Îûò</Text>
        <View style={styles.headerButtons}>
          <TouchableOpacity
            style={styles.performanceButton}
            onPress={() => navigation.navigate('Performance')}
          >
            <Text style={styles.performanceButtonText}>üìä</Text>
          </TouchableOpacity>
          <TouchableOpacity
            style={styles.logoutButton}
            onPress={() => {
              Alert.alert('Î°úÍ∑∏ÏïÑÏõÉ', 'Ï†ïÎßê Î°úÍ∑∏ÏïÑÏõÉ ÌïòÏãúÍ≤†ÏäµÎãàÍπå?', [
                { text: 'Ï∑®ÏÜå', style: 'cancel' },
                {
                  text: 'Î°úÍ∑∏ÏïÑÏõÉ',
                  style: 'destructive',
                  onPress: () => navigation.navigate('Login')
                }
              ]);
            }}
          >
            <Text style={styles.logoutButtonText}>Î°úÍ∑∏ÏïÑÏõÉ</Text>
          </TouchableOpacity>
        </View>
      </View>

      {/* Í≤ÄÏÉâÎ∞î */}
      <View style={styles.searchContainer}>
        <TextInput
          style={styles.searchInput}
          placeholder="Ï£ºÏãù Í≤ÄÏÉâ (Ìã∞Ïª§ ÎòêÎäî ÌöåÏÇ¨Î™Ö)"
          value={searchQuery}
          onChangeText={setSearchQuery}
          autoCapitalize="none"
        />
      </View>

      {/* Ï£ºÏãù Î™©Î°ù */}
      <ScrollView
        style={styles.scrollView}
        refreshControl={
          <RefreshControl refreshing={refreshing} onRefresh={onRefresh} />
        }
      >
        <View style={styles.stocksContainer}>
          {filteredStocks.length === 0 ? (
            <Text style={styles.noResultsText}>
              {searchQuery ? 'Í≤ÄÏÉâ Í≤∞Í≥ºÍ∞Ä ÏóÜÏäµÎãàÎã§.' : 'Ï£ºÏãù Îç∞Ïù¥ÌÑ∞Í∞Ä ÏóÜÏäµÎãàÎã§.'}
            </Text>
          ) : (
            filteredStocks.map(renderStockItem)
          )}
        </View>

        {/* ÌïòÎã® Ïó¨Î∞± */}
        <View style={styles.bottomSpacing} />
      </ScrollView>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#f8f9fa',
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: '#f8f9fa',
  },
  loadingText: {
    marginTop: 10,
    fontSize: 16,
    color: '#666',
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 20,
    paddingTop: 50, // ÏÉÅÌÉúÎ∞î Í≥†Î†§
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#e9ecef',
  },
  backButton: {
    padding: 8,
  },
  backButtonText: {
    fontSize: 16,
    color: '#007bff',
    fontWeight: '600',
  },
  headerTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  placeholder: {
    width: 60, // backButtonÍ≥º Í∑†Ìòï ÎßûÏ∂îÍ∏∞
  },
  headerButtons: {
    flexDirection: 'row',
    gap: 8,
  },
  performanceButton: {
    padding: 8,
    backgroundColor: '#007bff',
    borderRadius: 6,
    minWidth: 32,
    alignItems: 'center',
  },
  performanceButtonText: {
    color: 'white',
    fontSize: 14,
    fontWeight: 'bold',
  },
  logoutButton: {
    padding: 8,
    backgroundColor: '#dc3545',
    borderRadius: 6,
  },
  logoutButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  searchContainer: {
    padding: 20,
    backgroundColor: '#fff',
  },
  searchInput: {
    padding: 12,
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    fontSize: 16,
    backgroundColor: '#f8f9fa',
  },
  scrollView: {
    flex: 1,
  },
  stocksContainer: {
    padding: 20,
  },
  stockItem: {
    backgroundColor: '#fff',
    borderRadius: 12,
    padding: 16,
    marginBottom: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  stockHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'flex-start',
    marginBottom: 12,
  },
  stockInfo: {
    flex: 1,
    marginRight: 12,
  },
  tickerText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  nameText: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  ratingContainer: {
    marginTop: 4,
  },
  ratingText: {
    fontSize: 12,
    fontWeight: 'bold',
    paddingHorizontal: 6,
    paddingVertical: 2,
    borderRadius: 4,
    overflow: 'hidden',
  },
  priceContainer: {
    alignItems: 'flex-end',
  },
  priceText: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  buttonContainer: {
    flexDirection: 'row',
    gap: 6,
  },
  actionButton: {
    paddingHorizontal: 12,
    paddingVertical: 6,
    borderRadius: 6,
    minWidth: 50,
    alignItems: 'center',
  },
  buyButton: {
    backgroundColor: '#28a745',
  },
  sellButton: {
    backgroundColor: '#dc3545',
  },
  actionButtonText: {
    color: 'white',
    fontSize: 12,
    fontWeight: 'bold',
  },
  insightContainer: {
    backgroundColor: '#f8f9fa',
    padding: 12,
    borderRadius: 8,
    borderLeftWidth: 3,
    borderLeftColor: '#007bff',
  },
  insightText: {
    fontSize: 13,
    color: '#333',
    lineHeight: 18,
    marginBottom: 4,
  },
  viewMoreText: {
    fontSize: 12,
    color: '#007bff',
    fontWeight: '600',
  },
  noResultsText: {
    textAlign: 'center',
    color: '#666',
    fontStyle: 'italic',
    padding: 40,
    fontSize: 16,
  },
  bottomSpacing: {
    height: 30,
  },
});

export default StockListScreen;
